Schema::create('admins', function (Blueprint $table) {
            $table->increments('id');
            $table->string('username');
            $table->string('email')->unique();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });

        <div class="px-3 py-3">
                    <table class="compact" id="example" datatable [dtOptions]="dtOptions" >
                        <thead>
                            <tr>
                                <th>id</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Role</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                 
                        <tbody class="toappend">
                            <tr ng-click="callGetRow('1/0')" id="1.0">
                                <td>1</td>
                                <td>Udeh Praise</td>
                                <td>praise@gmail.com</td>
                                <td>User</td>
                                <td>
                                    <div class="d-inline-flex align-items-center justify-content-end gap-2">
                                    <button class="dropdown-item flex items-center text-xs gap-2 py-2 px-2 text-neutral800 " href="create.html">
                                        <span>
                                            <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                <path d="M6.63164 1.80011L2.52663 6.14511C2.37163 6.31011 2.22163 6.63511 2.19163 6.86011L2.00663 8.48011C1.94163 9.06511 2.36163 9.46511 2.94163 9.36511L4.55164 9.09011C4.77664 9.05011 5.09163 8.88511 5.24663 8.71511L9.35164 4.37011C10.0616 3.62011 10.3816 2.76511 9.27664 1.72011C8.17663 0.685108 7.34164 1.05011 6.63164 1.80011Z" stroke="#25252C" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round"/>
                                                <path d="M5.94531 2.5249C6.16031 3.9049 7.28031 4.9599 8.67031 5.0999" stroke="#25252C" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round"/>
                                                <path d="M1.5 11H10.5" stroke="#25252C" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round"/>
                                                </svg>
                                        </span> Edit
                                    </button>
                                    <button class="dropdown-item flex items-center text-xs gap-2 py-2 px-2 text-neutral800 " href="#">
                                        <span>
                                            <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                <path d="M10.5 2.99023C8.835 2.82523 7.16 2.74023 5.49 2.74023C4.5 2.74023 3.51 2.79023 2.52 2.89023L1.5 2.99023" stroke="#292D32" stroke-linecap="round" stroke-linejoin="round"/>
                                                <path d="M4.25 2.485L4.36 1.83C4.44 1.355 4.5 1 5.345 1H6.655C7.5 1 7.565 1.375 7.64 1.835L7.75 2.485" stroke="#292D32" stroke-linecap="round" stroke-linejoin="round"/>
                                                <path d="M9.42422 4.56982L9.09922 9.60482C9.04422 10.3898 8.99922 10.9998 7.60422 10.9998H4.39422C2.99922 10.9998 2.95422 10.3898 2.89922 9.60482L2.57422 4.56982" stroke="#292D32" stroke-linecap="round" stroke-linejoin="round"/>
                                                <path d="M5.16406 8.25H6.82906" stroke="#292D32" stroke-linecap="round" stroke-linejoin="round"/>
                                                <path d="M4.75 6.25H7.25" stroke="#292D32" stroke-linecap="round" stroke-linejoin="round"/>
                                            </svg>
                                        </span> Delete
                                    </button>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                 
                </div>






            
        
            <header class="d-flex align-items-center justify-content-end py-3 px-2 shadow-sm gap-4">
                <div class="d-flex align-items-start flex-column gap-1">
                    <h4 class="my-0" style="font-size: 20px;">{{loggedInUser.name}}</h4>
                    <h5 class="" style="font-size: 12px;">{{loggedInUser.roles[0].name}}</h5>
                </div>
                
                <button class="btn btn-sm btn-dark" ng-click="logout()">
                    <span>

                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M8.89844 7.55999C9.20844 3.95999 11.0584 2.48999 15.1084 2.48999H15.2384C19.7084 2.48999 21.4984 4.27999 21.4984 8.74999V15.27C21.4984 19.74 19.7084 21.53 15.2384 21.53H15.1084C11.0884 21.53 9.23844 20.08 8.90844 16.54" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M15.0011 12H3.62109" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M5.85 8.6499L2.5 11.9999L5.85 15.3499" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
    
                    </span>
                    Logout</button>
            </header>





public function index(Request $request)
    {
        // $users = User::with('roles')->orderBy('id','ASC')->paginate(50);
        $userQuery = (new User)->query();
        $userQuery->with('roles');
        $userQuery->whereHas(
            'roles', function($q){
                $q->where('roles.id', '!=', Role::$admin);
            }
        );

        if($request->input('searchText')){
            $userQuery->where(function($query) use($request){
                return $query->where('name', 'LIKE', '%'.$request->input('searchText').'%')
                        ->orWhere('email', 'LIKE', '%'.$request->input('searchText').'%');
            });
        }
        $limit = 10;

        if($request->input('limit')){
            $limit = $request->input('limit');
        }

        $users = $userQuery->paginate($limit);
          
        

        return response()->json($users);
    }



    public function index(Request $request, User $user)
    {
        // $users = User::with('roles')->orderBy('id','ASC')->paginate(50);  
        // dd('jjjjjj');
        $userQuery = $user->newQuery();
        // dd(User::first());
        $userQuery->with('roles');
        $userQuery->whereHas(
            'roles', function($q){
                $q->where('name','!=', 'Admin');
            }
        );
// dd('jjjjjj');

        
        $users = !empty( $request->input('searchText') ) ? $userQuery->where('name', $request->input('searchText'))->orWhere('email', $request->input('searchText')) : $userQuery;

        $users = !empty( $request->input('limit') ) ? $users->paginate( $request->input('limit') ) : $users->paginate(5);
          
        

        return response()->json($users);
    }
    

    public function index(Request $request)
    {
        // $users = User::with('roles')->orderBy('id','ASC')->paginate(50);  
        // dd($users);

        // $users = User::with('roles')->orderBy('id','ASC')->paginate(50);
        $userQuery = (new User)->query();
        $userQuery->with('roles');
        $userQuery->whereHas(
            'roles', function($q){
                $q->where('roles.id', '!=', Role::$admin);
            }
        );

        if($request->input('searchText')){
            $userQuery->where(function($query) use($request){
                return $query->where('name', 'LIKE', '%'.$request->input('searchText').'%')
                        ->orWhere('email', 'LIKE', '%'.$request->input('searchText').'%');
            });
        }
        $limit = 10;

        if($request->input('limit')){
            $limit = $request->input('limit');
        }

        $users = $userQuery->paginate($limit);
          
        

        return response()->json($users);
    }

    <?php

use Illuminate\Database\Seeder;
use App\User;
use App\Role;

use Illuminate\Support\Facades\Hash;

class UsersTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        User::truncate();
        DB::table('role_user')->truncate();

        $adminRole = Role::where('name', 'admin')->first();
        $parentRole = Role::where('name', 'parent')->first();
        $studentRole = Role::where('name', 'student')->first();


        $admin = User::create([
            'name' => 'Admin User',
            'email' => 'admin@admin.com',
            'password' => Hash::make('testing')
        ]);
        $admin->roles()->attach($adminRole);


        $parent = User::create([
            'name' => 'Udeh Samuel',
            'email' => 'parent@parent.com',
            'password' => Hash::make('testing')
        ]);
        $parent->roles()->attach($parentRole);

        $student = User::create([
            'name' => 'Udeh Evidence',
            'email' => 'student@student.com',
            'password' => Hash::make('testing')
        ]);
        $student->roles()->attach($studentRole);

        for($i =0; $i < 500000; $i++){
            $student = User::create([
                'name' => str_random(10),
                'email' => 'student'.$i.'@gmail.com',
                'password' => Hash::make('testing'),
            ]);
            $student->roles()->attach($studentRole);
        }

        for($i =0; $i < 500000; $i++){
            $parent = User::create([
                'name' => str_random(10),
                'email' => 'parent'.$i.'@gmail.com',
                'password' => Hash::make('testing'),
            ]);
            $parent->roles()->attach($parentRole);
        }
        
    }
}


